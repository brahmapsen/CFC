// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetReceived extends ethereum.Event {
  get params(): AssetReceived__Params {
    return new AssetReceived__Params(this);
  }
}

export class AssetReceived__Params {
  _event: AssetReceived;

  constructor(event: AssetReceived) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get flag(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class ClinialResult extends ethereum.Event {
  get params(): ClinialResult__Params {
    return new ClinialResult__Params(this);
  }
}

export class ClinialResult__Params {
  _event: ClinialResult;

  constructor(event: ClinialResult) {
    this._event = event;
  }

  get submitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get documentURI(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get clinicalTrialStage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get flag(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class NFTIssued extends ethereum.Event {
  get params(): NFTIssued__Params {
    return new NFTIssued__Params(this);
  }
}

export class NFTIssued__Params {
  _event: NFTIssued;

  constructor(event: NFTIssued) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get uri(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get flag(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class SignedClinicalResult extends ethereum.Event {
  get params(): SignedClinicalResult__Params {
    return new SignedClinicalResult__Params(this);
  }
}

export class SignedClinicalResult__Params {
  _event: SignedClinicalResult;

  constructor(event: SignedClinicalResult) {
    this._event = event;
  }

  get submitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get documentURI(): string {
    return this._event.parameters[1].value.toString();
  }

  get trialStage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rootTxnId(): string {
    return this._event.parameters[3].value.toString();
  }

  get signatures(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }

  get flag(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class PayForSuccess__PayersResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getUri(): string {
    return this.value1;
  }
}

export class PayForSuccess extends ethereum.SmartContract {
  static bind(address: Address): PayForSuccess {
    return new PayForSuccess("PayForSuccess", address);
  }

  Payers(param0: Address, param1: Address): PayForSuccess__PayersResult {
    let result = super.call(
      "Payers",
      "Payers(address,address):(uint256,string)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new PayForSuccess__PayersResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_Payers(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<PayForSuccess__PayersResult> {
    let result = super.tryCall(
      "Payers",
      "Payers(address,address):(uint256,string)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PayForSuccess__PayersResult(value[0].toBigInt(), value[1].toString())
    );
  }

  UserEthInfo(param0: Address): BigInt {
    let result = super.call("UserEthInfo", "UserEthInfo(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_UserEthInfo(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UserEthInfo",
      "UserEthInfo(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UserInfo(param0: Address, param1: Address): BigInt {
    let result = super.call("UserInfo", "UserInfo(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_UserInfo(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UserInfo",
      "UserInfo(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fakeTokenAddrForNativeCurrency(): Address {
    let result = super.call(
      "fakeTokenAddrForNativeCurrency",
      "fakeTokenAddrForNativeCurrency():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fakeTokenAddrForNativeCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fakeTokenAddrForNativeCurrency",
      "fakeTokenAddrForNativeCurrency():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractName(): string {
    let result = super.call(
      "getContractName",
      "getContractName():(string)",
      []
    );

    return result[0].toString();
  }

  try_getContractName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getContractName",
      "getContractName():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getFunder(index: BigInt): Address {
    let result = super.call("getFunder", "getFunder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getFunder(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getFunder", "getFunder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserAsset(assetAddress: Address): BigInt {
    let result = super.call("getUserAsset", "getUserAsset(address):(uint256)", [
      ethereum.Value.fromAddress(assetAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getUserAsset(assetAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserAsset",
      "getUserAsset(address):(uint256)",
      [ethereum.Value.fromAddress(assetAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserEthAmount(): BigInt {
    let result = super.call(
      "getUserEthAmount",
      "getUserEthAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUserEthAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserEthAmount",
      "getUserEthAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositAssetsCall extends ethereum.Call {
  get inputs(): DepositAssetsCall__Inputs {
    return new DepositAssetsCall__Inputs(this);
  }

  get outputs(): DepositAssetsCall__Outputs {
    return new DepositAssetsCall__Outputs(this);
  }
}

export class DepositAssetsCall__Inputs {
  _call: DepositAssetsCall;

  constructor(call: DepositAssetsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositAssetsCall__Outputs {
  _call: DepositAssetsCall;

  constructor(call: DepositAssetsCall) {
    this._call = call;
  }
}

export class DepositEthCall extends ethereum.Call {
  get inputs(): DepositEthCall__Inputs {
    return new DepositEthCall__Inputs(this);
  }

  get outputs(): DepositEthCall__Outputs {
    return new DepositEthCall__Outputs(this);
  }
}

export class DepositEthCall__Inputs {
  _call: DepositEthCall;

  constructor(call: DepositEthCall) {
    this._call = call;
  }
}

export class DepositEthCall__Outputs {
  _call: DepositEthCall;

  constructor(call: DepositEthCall) {
    this._call = call;
  }
}

export class IssueNFTCall extends ethereum.Call {
  get inputs(): IssueNFTCall__Inputs {
    return new IssueNFTCall__Inputs(this);
  }

  get outputs(): IssueNFTCall__Outputs {
    return new IssueNFTCall__Outputs(this);
  }
}

export class IssueNFTCall__Inputs {
  _call: IssueNFTCall;

  constructor(call: IssueNFTCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class IssueNFTCall__Outputs {
  _call: IssueNFTCall;

  constructor(call: IssueNFTCall) {
    this._call = call;
  }
}

export class ReleaseAssetsCall extends ethereum.Call {
  get inputs(): ReleaseAssetsCall__Inputs {
    return new ReleaseAssetsCall__Inputs(this);
  }

  get outputs(): ReleaseAssetsCall__Outputs {
    return new ReleaseAssetsCall__Outputs(this);
  }
}

export class ReleaseAssetsCall__Inputs {
  _call: ReleaseAssetsCall;

  constructor(call: ReleaseAssetsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get userAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ReleaseAssetsCall__Outputs {
  _call: ReleaseAssetsCall;

  constructor(call: ReleaseAssetsCall) {
    this._call = call;
  }
}

export class SubmitClinialResultCall extends ethereum.Call {
  get inputs(): SubmitClinialResultCall__Inputs {
    return new SubmitClinialResultCall__Inputs(this);
  }

  get outputs(): SubmitClinialResultCall__Outputs {
    return new SubmitClinialResultCall__Outputs(this);
  }
}

export class SubmitClinialResultCall__Inputs {
  _call: SubmitClinialResultCall;

  constructor(call: SubmitClinialResultCall) {
    this._call = call;
  }

  get documentURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get clinicalTrialStage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitClinialResultCall__Outputs {
  _call: SubmitClinialResultCall;

  constructor(call: SubmitClinialResultCall) {
    this._call = call;
  }
}

export class SubmitSignedClinialResultCall extends ethereum.Call {
  get inputs(): SubmitSignedClinialResultCall__Inputs {
    return new SubmitSignedClinialResultCall__Inputs(this);
  }

  get outputs(): SubmitSignedClinialResultCall__Outputs {
    return new SubmitSignedClinialResultCall__Outputs(this);
  }
}

export class SubmitSignedClinialResultCall__Inputs {
  _call: SubmitSignedClinialResultCall;

  constructor(call: SubmitSignedClinialResultCall) {
    this._call = call;
  }

  get documentURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get clinicalTrialStage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rootTxnId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class SubmitSignedClinialResultCall__Outputs {
  _call: SubmitSignedClinialResultCall;

  constructor(call: SubmitSignedClinialResultCall) {
    this._call = call;
  }
}
